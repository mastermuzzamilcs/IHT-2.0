<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picViewImage.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>